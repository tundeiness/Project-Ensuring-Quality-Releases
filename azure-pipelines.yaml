name: Azure Pipelines

trigger:
  branches:
    include:
      - azure-pipelines-selenium

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: vmImageName
    value: 'devopsVM'
 

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Provisioning IaC'
    pool:
      name: myAgentPool
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.5.7'

    - task: Bash@3
      displayName: 'Write SSH Public Key to id_rsa.pub'
      inputs:
        targetType: 'inline'
        script: |
          echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
          chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

    - task: DownloadSecureFile@1
      name: sshkey
      displayName: 'Download SSH Private Key'
      inputs:
        secureFile: 'id_rsa'  # Must match the name of your uploaded secure file

    - task: Bash@3
      displayName: "Install SSH Private Key"
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(sshkey.secureFilePath) ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
    
    - task: Bash@3
      displayName: 'Install Chrome, Chromedriver, and Selenium'
      inputs:
        targetType: 'inline'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        script: |
          #!/bin/bash
          set -e

          sudo apt-get update -y
          sudo apt-get upgrade -y

          sudo apt-get install -y python3-pip unzip xvfb libxi6 libgconf-2-4 chromium-browser

          echo "🌐 Installing Google Chrome..."
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y

          echo "🚗 Installing Chromedriver..."
          wget -q https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

          echo "🐍 Installing Selenium..."
          pip3 install selenium

          echo "📁 Creating log directory..."
          mkdir -p test-logs

          echo "🚀 Running Selenium script..."
          sudo python3 automatedtesting/selenium/login.py | tee test-logs/selenium-log.log

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium Log Artifact'
      inputs:
        targetPath: 'test-logs/selenium-log.log'
        artifactName: 'selenium-logs'


    # - task: Bash@3
    #   displayName: 'Terraform Init'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform init \
    #         -backend-config="storage_account_name=tfstatecc9ded810294" \
    #         -backend-config="container_name=tfstate" \
    #         -backend-config="key=test.terraform.tfstate" \
    #         -backend-config="resource_group_name=Azuredevops" \
    #         -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
    #         -backend-config="tenant_id=$ARM_TENANT_ID"

    # - task: Bash@3
    #   displayName: 'Create terraform.tfvars'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       cat > terraform.tfvars <<EOF
    #       subscription_id     = "$ARM_SUBSCRIPTION_ID"
    #       client_id           = "$ARM_CLIENT_ID"
    #       client_secret       = "$ARM_CLIENT_SECRET"
    #       tenant_id           = "$ARM_TENANT_ID"
    #       location            = "East US"
    #       resource_group      = "Azuredevops"
    #       application_type    = "myWebApp"
    #       virtual_network_name = "devopsnet"
    #       address_space       = ["10.5.0.0/16"]
    #       address_prefix_test = "10.5.1.0/24"
    #       vm_name             = "$(vmImageName)"
    #       admin_ssh_key       = "$ADMIN_SSH_PUBLIC_KEY"
    #       EOF

    # - task: Bash@3
    #   displayName: 'Terraform Apply'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform apply -auto-approve


  # - job: SeleniumTests
  #   steps:
    
  #   - task: Bash@3
  #     displayName: 'Run Selenium'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         #!/bin/bash
  #         set -e

  #         echo "Updating packages..."
  #         sudo apt update && sudo apt upgrade -y

  #         echo "Installing dependencies..."
  #         sudo apt install -y python3.8-venv python3-pip wget unzip libgconf-2-4

  #         echo "Installing Python packages..."
  #         pip install --upgrade pip
  #         pip install selenium webdriver-manager

  #         echo "Installing Google Chrome..."
  #         wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  #         sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt -f install -y

  #         mkdir -p tests
  #         touch tests/newlog.log

  #         python3 automatedtesting/selenium/login.py | tee tests/newlog.log

  #   - task: PublishPipelineArtifact@1
  #     displayName: 'Publish Selenium Logs'
  #     inputs:
  #       targetPath: 'tests/newlog.log'
  #       artifactName: 'selenium-logs'


      