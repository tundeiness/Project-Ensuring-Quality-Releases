name: Azure Pipelines

trigger:
  branches:
    include:
      - azure-pipelines-selenium

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: vmImageName
    value: 'devopsVM'
 

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Provisioning IaC'
    pool:
      name: myAgentPool
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.5.7'

    - task: Bash@3
      displayName: 'Write SSH Public Key to id_rsa.pub'
      inputs:
        targetType: 'inline'
        script: |
          echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
          chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

    - task: DownloadSecureFile@1
      name: sshkey
      displayName: 'Download SSH Private Key'
      inputs:
        secureFile: 'id_rsa'  # Must match the name of your uploaded secure file

    - task: Bash@3
      displayName: "Install SSH Private Key"
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(sshkey.secureFilePath) ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

    # - task: Bash@3
    #   displayName: 'Terraform Init'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform init \
    #         -backend-config="storage_account_name=tfstatecc9ded810294" \
    #         -backend-config="container_name=tfstate" \
    #         -backend-config="key=test.terraform.tfstate" \
    #         -backend-config="resource_group_name=Azuredevops" \
    #         -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
    #         -backend-config="tenant_id=$ARM_TENANT_ID"

    # - task: Bash@3
    #   displayName: 'Create terraform.tfvars'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       cat > terraform.tfvars <<EOF
    #       subscription_id     = "$ARM_SUBSCRIPTION_ID"
    #       client_id           = "$ARM_CLIENT_ID"
    #       client_secret       = "$ARM_CLIENT_SECRET"
    #       tenant_id           = "$ARM_TENANT_ID"
    #       location            = "East US"
    #       resource_group      = "Azuredevops"
    #       application_type    = "myWebApp"
    #       virtual_network_name = "devopsnet"
    #       address_space       = ["10.5.0.0/16"]
    #       address_prefix_test = "10.5.1.0/24"
    #       vm_name             = "$(vmImageName)"
    #       admin_ssh_key       = "$ADMIN_SSH_PUBLIC_KEY"
    #       EOF

    # - task: Bash@3
    #   displayName: 'Terraform Apply'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform apply -auto-approve


  - job: SeleniumTests
    steps:
    
    - task: DeleteFiles@1
      displayName: 'Clean workspace before test'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**/__pycache__/**\n**/*.pyc'
    - task: Bash@3
      displayName: 'Run Selenium'
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
          set -e

          echo "Updating packages..."
          sudo apt update && sudo apt upgrade -y

          echo "Installing dependencies..."
          sudo apt install -y python3.8-venv python3-pip wget unzip libgconf-2-4

          echo "Setting up virtual environment..."
          python3 -m venv ~/.myrepo
          source ~/.myrepo/bin/activate

          echo "Installing Python packages..."
          pip install --upgrade pip
          pip install selenium webdriver-manager

          echo "Installing Google Chrome..."
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt -f install -y

          echo "Verifying Chrome version..."
          google-chrome --version

          echo "Setting up log files..."
          mkdir -p test-logs
          touch test-logs/selenium-log.log

          echo "Running Selenium script..."
          if [ -f automatedtesting/selenium/login.py ]; then
            python automatedtesting/selenium/login.py | tee test-logs/selenium-log.log
          else
            echo "Test script not found: automatedtesting/selenium/login.py" | tee test-logs/selenium-log.log
          fi


    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Tests'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/uitests.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/uitests.zip   # Same as the archiveFile artifact above. 
    #   displayName: 'Upload Package'
    #   artifact: drop-uitests

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium Logs'
      inputs:
        targetPath: 'test-logs/selenium-log.log'
        artifactName: 'selenium-logs'


  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           displayName: 'Configure Selenium on VM'
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #!/bin/bash
  #               set -e

  #               mkdir -p $HOME/selenium-test
  #               cd $HOME/selenium-test

  #               sudo apt-get update
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip unzip expect zip chromium-browser -y

  #               pip3 install selenium pytest pytest-html pytest-xdist pytest-nunit

  #               rm -rf chromedriver*
  #               wget -q https://chromedriver.storage.googleapis.com/96.0.4664.18/chromedriver_linux64.zip
  #               unzip -q chromedriver_linux64.zip
  #               sudo mv chromedriver /usr/bin/
  #               sudo chmod +x /usr/bin/chromedriver
  #               rm chromedriver_linux64.zip

  # - job: SeleniumTests
  #   displayName: 'Run Selenium Tests'
  #   dependsOn: VirtualMachineDeploy
  #   steps:
  #   - task: Bash@3
  #     displayName: 'Execute Selenium Test Suite'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         #!/bin/bash
  #         set -e

  #         mkdir -p $HOME/selenium-test
  #         cd $HOME/selenium-test

  #         python3 -m pip install --upgrade pip
  #         pip3 install selenium pytest pytest-html pytest-xdist pytest-nunit

  #         cp -r $(System.DefaultWorkingDirectory)/automatedtesting .

  #         mkdir -p logs test-results

  #         echo "Starting Selenium test execution at $(date)" | tee logs/test-execution.log

  #         python3 automatedtesting/selenium/login.py 2>&1 | tee logs/selenium-test-output.log
  #         TEST_EXIT_CODE=${PIPESTATUS[0]}

  #         echo "Test execution completed at $(date) with exit code: $TEST_EXIT_CODE" | tee -a logs/test-execution.log

  #         echo "=== SELENIUM TEST SUMMARY ===" > test-results/test-summary.txt
  #         echo "Execution Date: $(date)" >> test-results/test-summary.txt
  #         echo "Test Script: automatedtesting/selenium/login.py" >> test-results/test-summary.txt
  #         echo "Exit Code: $TEST_EXIT_CODE" >> test-results/test-summary.txt
  #         echo "Log Files Generated:" >> test-results/test-summary.txt
  #         echo "- logs/test-execution.log" >> test-results/test-summary.txt
  #         echo "- logs/selenium-test-output.log" >> test-results/test-summary.txt

  #         if [ $TEST_EXIT_CODE -eq 0 ]; then
  #           echo "Status: PASSED" >> test-results/test-summary.txt
  #         else
  #           echo "Status: FAILED" >> test-results/test-summary.txt
  #         fi

  #         echo "" >> test-results/test-summary.txt
  #         echo "Files in test directory:" >> test-results/test-summary.txt
  #         find . -type f -newer automatedtesting/selenium/login.py 2>/dev/null >> test-results/test-summary.txt || echo "No new files created" >> test-results/test-summary.txt

  #         exit $TEST_EXIT_CODE

  #   - task: Bash@3
  #     displayName: 'Archive Test Results'
  #     condition: always()
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         #!/bin/bash
  #         set -e

  #         cd $HOME/selenium-test

  #         mkdir -p selenium-test-results
  #         [ -d "logs" ] && cp -r logs selenium-test-results/
  #         [ -d "test-results" ] && cp -r test-results selenium-test-results/

  #         find . -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.html" -o -iname "*.xml" -o -iname "*.json" \) -exec cp {} selenium-test-results/ \; 2>/dev/null || true

  #         zip -r selenium-test-results.zip selenium-test-results/
  #         cp selenium-test-results.zip $(System.DefaultWorkingDirectory)/

  #   - task: PublishBuildArtifacts@1
  #     displayName: 'Publish Selenium Test Artifacts'
  #     inputs:
  #       PathtoPublish: '$(System.DefaultWorkingDirectory)/selenium-test-results.zip'
  #       ArtifactName: 'selenium-artifacts'
  #       publishLocation: 'Container'
