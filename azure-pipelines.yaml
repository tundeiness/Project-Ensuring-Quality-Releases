name: Azure Pipelines

trigger:
  branches:
    include:
      - main

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - group: admin_ssh_private_key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: environmentName
    value: 'test'
  - name: vmImageName
    value: 'devopsVM'
 

stages:
# - stage: Build
#   jobs:
#   - job: BuildInfrastructure
#     displayName: 'Provisioning IaC'
#     pool:
#       name: myAgentPool
#     steps:
#     - task: TerraformInstaller@0
#       displayName: 'Install Terraform'
#       inputs:
#         terraformVersion: '1.5.7'

#     - task: Bash@3
#       displayName: 'Write SSH Public Key to id_rsa.pub'
#       inputs:
#         targetType: 'inline'
#         script: |
#           echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
#           chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

#     - task: Bash@3
#       displayName: 'Terraform Init'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           terraform init \
#             -backend-config="storage_account_name=tfstate64f6a8fe539a" \
#             -backend-config="container_name=tfstate" \
#             -backend-config="key=test.terraform.tfstate" \
#             -backend-config="resource_group_name=Azuredevops" \
#             -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
#             -backend-config="tenant_id=$ARM_TENANT_ID"

#     - task: Bash@3
#       displayName: 'Create terraform.tfvars'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           cat > terraform.tfvars <<EOF
#           subscription_id     = "$ARM_SUBSCRIPTION_ID"
#           client_id           = "$ARM_CLIENT_ID"
#           client_secret       = "$ARM_CLIENT_SECRET"
#           tenant_id           = "$ARM_TENANT_ID"
#           location            = "South Central US"
#           resource_group      = "Azuredevops"
#           application_type    = "myWebApp"
#           virtual_network_name = "devopsnet"
#           address_space       = ["10.5.0.0/16"]
#           address_prefix_test = "10.5.1.0/24"
#           vm_name             = "$(vmImageName)"
#           admin_ssh_key       = "$ADMIN_SSH_PUBLIC_KEY"
#           EOF

#     - task: Bash@3
#       displayName: 'Terraform Apply'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           terraform apply -auto-approve


- stage: UI_Testing
  displayName: 'Run Selenium UI Tests on devopsVM'
  jobs:
    - job: RunSeleniumTests
      displayName: 'Run Selenium UI Tests on devopsVM'
      pool:
        name: myAgentPool
      steps:

        # - task: UsePythonVersion@0
        #   inputs:
        #     versionSpec: '$(python_version)'
        #     addToPath: true

        - task: Bash@3
          displayName: 'Write SSH Private Key to ~/.ssh/id_rsa'
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p ~/.ssh
              printf "%s\n" "$ADMIN_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa

        - task: Bash@3
          displayName: 'Install Chrome, ChromeDriver, and Selenium on VM'
          inputs:
            targetType: 'inline'
            script: |
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@172.202.174.114 << 'EOF'
                sudo apt update
                sudo apt install -y chromium-browser chromium-chromedriver python3-pip
                pip3 install selenium
                mkdir -p ~/selenium_logs
              EOF

        - task: Bash@3
          displayName: 'Copy login.py to devopsVM via scp'
          inputs:
            targetType: 'inline'
            script: |
              scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $(projectRoot)/automatedtesting/selenium/login.py adminuser@172.202.174.114:/home/adminuser/

        - task: Bash@3
          displayName: 'Run login.py on devopsVM'
          inputs:
            targetType: 'inline'
            script: |
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@172.202.174.114 << 'EOF'
                python3 /home/adminuser/login.py > ~/selenium_logs/test_output.log 2>&1
              EOF

        - task: Bash@3
          displayName: 'Copy logs from devopsVM to agent via scp'
          inputs:
            targetType: 'inline'
            script: |
              scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@172.202.174.114:/home/adminuser/selenium_logs/test_output.log $(Build.ArtifactStagingDirectory)/

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Selenium Logs'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'selenium-logs'






    # - task: Bash@3
    #   displayName: 'Set vm_ip Variable'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       VM_IP=$(terraform output -raw vm_public_ip)
    #       echo "##vso[task.setvariable variable=vm_ip]$VM_IP"

    # - task: Bash@3
    #   displayName: 'Generate SSH known_hosts Entry'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       KNOWN_HOST_ENTRY=$(ssh-keyscan -t rsa $(vm_ip) 2>/dev/null)
    #       echo "##vso[task.setvariable variable=knownHostsEntry]$KNOWN_HOST_ENTRY"

# Uncomment and use these in next stage once provisioning is successful
# - stage: Test
#   displayName: 'Selenium Tests'
#   jobs:
#     - deployment: RunSelenium
#       displayName: 'Install Deps and Run Selenium Tests'
#       environment:
#         name: myTestVM
#         resourceType: VirtualMachine
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#               - checkout: self
#               - script: |
#                   echo "Installing Chrome, ChromeDriver, Python3, pip, selenium on target machine"
#                   sudo apt update -y
#                   sudo apt install -y python3-pip wget unzip xvfb
#                   sudo pip3 install selenium
#                   wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#                   sudo apt install -y ./google-chrome-stable_current_amd64.deb || sudo apt --fix-broken install -y
#                   CHROME_VERSION=$(google-chrome --version | grep -oP '[0-9.]+' | head -1)
#                   MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
#                   DRIVER_VERSION=$(wget -qO- "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${MAJOR_VERSION}")
#                   wget https://chromedriver.storage.googleapis.com/${DRIVER_VERSION}/chromedriver_linux64.zip
#                   unzip chromedriver_linux64.zip
#                   chmod +x chromedriver
#                   sudo mv chromedriver /usr/bin/
#                   echo "Running Selenium test"
#                   python3 login.py > selenium.log 2>&1
#                 displayName: Run Selenium Test
#               - script: |
#                   echo "Zipping logs"
#                   zip selenium-logs.zip selenium.log
#                 displayName: Zip Logs
#               - task: PublishBuildArtifacts@1
#                 inputs:
#                   PathtoPublish: 'selenium-logs.zip'
#                   ArtifactName: 'selenium-logs'
#                   publishLocation: 'Container'
