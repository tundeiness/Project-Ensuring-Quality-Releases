name: Azure Pipelines

trigger:
  branches:
    include:
      - main

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - group: admin_ssh_private_key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: environmentName
    value: 'test'
  - name: vmImageName
    value: 'devopsVM'
 

stages:
# - stage: Build
#   jobs:
#   - job: BuildInfrastructure
#     displayName: 'Provisioning IaC'
#     pool:
#       name: myAgentPool
#     steps:
#     - task: TerraformInstaller@0
#       displayName: 'Install Terraform'
#       inputs:
#         terraformVersion: '1.5.7'

#     - task: Bash@3
#       displayName: 'Write SSH Public Key to id_rsa.pub'
#       inputs:
#         targetType: 'inline'
#         script: |
#           echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
#           chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

#     - task: Bash@3
#       displayName: 'Terraform Init'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           terraform init \
#             -backend-config="storage_account_name=tfstate64f6a8fe539a" \
#             -backend-config="container_name=tfstate" \
#             -backend-config="key=test.terraform.tfstate" \
#             -backend-config="resource_group_name=Azuredevops" \
#             -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
#             -backend-config="tenant_id=$ARM_TENANT_ID"

#     - task: Bash@3
#       displayName: 'Create terraform.tfvars'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           cat > terraform.tfvars <<EOF
#           subscription_id     = "$ARM_SUBSCRIPTION_ID"
#           client_id           = "$ARM_CLIENT_ID"
#           client_secret       = "$ARM_CLIENT_SECRET"
#           tenant_id           = "$ARM_TENANT_ID"
#           location            = "South Central US"
#           resource_group      = "Azuredevops"
#           application_type    = "myWebApp"
#           virtual_network_name = "devopsnet"
#           address_space       = ["10.5.0.0/16"]
#           address_prefix_test = "10.5.1.0/24"
#           vm_name             = "$(vmImageName)"
#           admin_ssh_key       = "$ADMIN_SSH_PUBLIC_KEY"
#           EOF

#     - task: Bash@3
#       displayName: 'Terraform Apply'
#       env:
#         ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#         ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#         ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#         ARM_TENANT_ID: $(ARM_TENANT_ID)
#       inputs:
#         targetType: 'inline'
#         script: |
#           cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#           terraform apply -auto-approve


- stage: UI_Testing
  jobs:
    - job: RunSeleniumTests
      displayName: 'Run Selenium UI Tests on devopsVM'
      pool:
        name: myAgentPool
      steps:

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python_version)'
          addToPath: true

      - task: DownloadSecureFile@1
        name: sshKey
        displayName: 'Download SSH Private Key'
        inputs:
          secureFile: 'id_rsa'

      - task: Bash@3
        displayName: 'Setup SSH Private Key'
        inputs:
          targetType: 'inline'
          script: |
            # Create SSH directory with proper permissions
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            
            # Copy the secure file to SSH directory
            cp $(sshKey.secureFilePath) ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Debug and validate the key
            echo "Key file size: $(wc -c ~/.ssh/id_rsa)"
            echo "Key file type: $(file ~/.ssh/id_rsa)"
            echo "Key permissions: $(ls -la ~/.ssh/id_rsa)"
            echo "Key format (first line): $(head -n 1 ~/.ssh/id_rsa)"
            
            # Check if key is password protected
            if grep -q "ENCRYPTED" ~/.ssh/id_rsa; then
              echo "❌ ERROR: SSH key appears to be password-protected (encrypted)"
              echo "Azure DevOps pipelines cannot use encrypted SSH keys"
              echo "Please generate a new key without a passphrase or decrypt this key"
              exit 1
            fi
            
            # Try to extract public key to test if private key is readable
            echo "Testing if private key is readable..."
            if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/dev/null; then
              echo "✓ Successfully extracted public key from private key"
              echo "Public key: $(cat ~/.ssh/id_rsa.pub)"
            else
              echo "❌ Cannot extract public key from private key"
              echo "This usually means:"
              echo "1. Key is password-protected/encrypted"
              echo "2. Key format is corrupted"
              echo "3. Key was generated with incompatible parameters"
              
              # Try to convert the key format as a fix attempt
              echo "Attempting to convert key format..."
              cp ~/.ssh/id_rsa ~/.ssh/id_rsa.backup
              
              # Try converting to PEM format without passphrase
              if ssh-keygen -p -m PEM -f ~/.ssh/id_rsa.pem -N "" -P "" 2>/dev/null; then
                echo "✓ Key converted to PEM format"
                # Test again
                if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/dev/null; then
                  echo "✓ Public key extraction successful after conversion"
                  echo "Public key: $(cat ~/.ssh/id_rsa.pub)"
                else
                  echo "❌ Key conversion didn't help - restoring original"
                  cp ~/.ssh/id_rsa.backup ~/.ssh/id_rsa
                  exit 1
                fi
              else
                echo "❌ Key conversion failed"
                echo "Please check your SSH key and ensure it:"
                echo "- Is not password-protected"
                echo "- Was generated correctly"
                echo "- Is in a standard format"
                exit 1
              fi
            fi
            
            echo "SSH key setup completed successfully"

      - task: Bash@3
        displayName: 'Test SSH Connection'
        inputs:
          targetType: 'inline'
          script: |
            # Test SSH connection with the secure file key
            echo "Testing SSH connection..."
            
            # First, try a simple connection test without verbose output
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes -i ~/.ssh/id_rsa.pem adminuser@172.202.174.114 'echo "SSH connection successful"' 2>/dev/null; then
              echo "✓ SSH connection successful!"
            else
              echo "Initial connection failed, trying with verbose output..."
              
              # Try with verbose output for debugging
              ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes -i ~/.ssh/id_rsa.pem adminuser@172.202.174.114 'echo "SSH connection successful"' 2>&1 | head -20
              
              # Check if it's a key format issue by trying ssh-agent
              echo "Trying alternative method with ssh-agent..."
              eval $(ssh-agent -s)
              
              if ssh-add ~/.ssh/id_rsa 2>/dev/null; then
                echo "Key successfully added to ssh-agent"
                if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 adminuser@172.202.174.114 'echo "SSH via agent successful"'; then
                  echo "✓ SSH connection successful via ssh-agent!"
                else
                  echo "✗ SSH connection failed even with ssh-agent"
                  exit 1
                fi
              else
                echo "Could not add key to ssh-agent"
                
                # Last attempt: check if the public key matches what's expected
                echo "Extracting public key for verification..."
                if ssh-keygen -y -f ~/.ssh/id_rsa 2>/dev/null; then
                  echo "Public key extracted successfully"
                else
                  echo "Cannot extract public key from private key"
                fi
                
                exit 1
              fi
            fi

      - task: Bash@3
        displayName: 'Install Chrome, ChromeDriver, and Selenium on VM'
        inputs:
          targetType: 'inline'
          script: |
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa adminuser@172.202.174.114 << 'EOF'
              # Update package list
              sudo apt update
              
              # Install Chrome and dependencies
              sudo apt install -y chromium-browser chromium-chromedriver python3-pip
              
              # Install Selenium
              pip3 install selenium
              
              # Create logs directory
              mkdir -p ~/selenium_logs
              
              # Verify installations
              chromium-browser --version
              chromedriver --version
              python3 -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
            EOF

      - task: Bash@3
        displayName: 'Copy login.py to devopsVM using scp'
        inputs:
          targetType: 'inline'
          script: |
            # Verify source file exists
            if [ ! -f "$(projectRoot)/automatedtesting/selenium/login.py" ]; then
              echo "Source file not found: $(projectRoot)/automatedtesting/selenium/login.py"
              exit 1
            fi
            
            # Copy file with error handling
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa $(projectRoot)/automatedtesting/selenium/login.py adminuser@172.202.174.114:/home/adminuser/ || {
              echo "SCP failed. Checking connectivity..."
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@172.202.174.114 'pwd'
              exit 1
            }

      - task: Bash@3
        displayName: 'Run login.py on devopsVM'
        inputs:
          targetType: 'inline'
          script: |
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa adminuser@172.202.174.114 << 'EOF'
              # Verify file exists
              if [ ! -f "/home/adminuser/login.py" ]; then
                echo "login.py not found on remote server"
                exit 1
              fi
              
              # Run the test with proper logging
              echo "Starting Selenium test..."
              cd /home/adminuser
              python3 login.py > ~/selenium_logs/test_output.log 2>&1
              
              # Check if test completed
              echo "Test execution completed. Log file contents:"
              cat ~/selenium_logs/test_output.log
            EOF

      - task: Bash@3
        displayName: 'Copy logs from devopsVM to agent'
        inputs:
          targetType: 'inline'
          script: |
            # Ensure artifact staging directory exists
            mkdir -p $(Build.ArtifactStagingDirectory)
            
            # Copy logs with error handling
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa adminuser@172.202.174.114:/home/adminuser/selenium_logs/test_output.log $(Build.ArtifactStagingDirectory)/ || {
              echo "Failed to copy log file. Checking if it exists on remote server..."
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@172.202.174.114 'ls -la ~/selenium_logs/'
              exit 1
            }

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Selenium Logs'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'selenium-logs'
        condition: always() # Publish logs even if previous steps failed





    # - task: Bash@3
    #   displayName: 'Set vm_ip Variable'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       VM_IP=$(terraform output -raw vm_public_ip)
    #       echo "##vso[task.setvariable variable=vm_ip]$VM_IP"

    # - task: Bash@3
    #   displayName: 'Generate SSH known_hosts Entry'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       KNOWN_HOST_ENTRY=$(ssh-keyscan -t rsa $(vm_ip) 2>/dev/null)
    #       echo "##vso[task.setvariable variable=knownHostsEntry]$KNOWN_HOST_ENTRY"

# Uncomment and use these in next stage once provisioning is successful
# - stage: Test
#   displayName: 'Selenium Tests'
#   jobs:
#     - deployment: RunSelenium
#       displayName: 'Install Deps and Run Selenium Tests'
#       environment:
#         name: myTestVM
#         resourceType: VirtualMachine
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#               - checkout: self
#               - script: |
#                   echo "Installing Chrome, ChromeDriver, Python3, pip, selenium on target machine"
#                   sudo apt update -y
#                   sudo apt install -y python3-pip wget unzip xvfb
#                   sudo pip3 install selenium
#                   wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#                   sudo apt install -y ./google-chrome-stable_current_amd64.deb || sudo apt --fix-broken install -y
#                   CHROME_VERSION=$(google-chrome --version | grep -oP '[0-9.]+' | head -1)
#                   MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
#                   DRIVER_VERSION=$(wget -qO- "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${MAJOR_VERSION}")
#                   wget https://chromedriver.storage.googleapis.com/${DRIVER_VERSION}/chromedriver_linux64.zip
#                   unzip chromedriver_linux64.zip
#                   chmod +x chromedriver
#                   sudo mv chromedriver /usr/bin/
#                   echo "Running Selenium test"
#                   python3 login.py > selenium.log 2>&1
#                 displayName: Run Selenium Test
#               - script: |
#                   echo "Zipping logs"
#                   zip selenium-logs.zip selenium.log
#                 displayName: Zip Logs
#               - task: PublishBuildArtifacts@1
#                 inputs:
#                   PathtoPublish: 'selenium-logs.zip'
#                   ArtifactName: 'selenium-logs'
#                   publishLocation: 'Container'
