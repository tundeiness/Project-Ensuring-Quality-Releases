name: azure-pipeline

trigger:
  - main

pool:
  name: AgentPool

variables:
  python_version: '3.8.10'
  azureServiceConnectionId: 'ServiceConnex'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'

stages:
- stage: Build
  displayName: 'Provision Infrastructure'
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform Infrastructure'
    steps:
    # Install Terraform
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.10.5'

    # Terraform Init using Azure Service Connection properly
    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(projectRoot)/terraform'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmConfig: |
          resource_group_name=Azuredevops
          storage_account_name=tfstate1411330650
          container_name=tfstate
          key=test.terraform.tfstate
          use_msi=false
          subscription_id=0fadec41-9b39-430f-aa5d-ce7b49f9346c
          tenant_id=f958e84a-92b8-439f-a62d-4f45996b6d07

    # Terraform Validate
    - task: TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(projectRoot)/terraform'

    # Terraform Plan
    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(projectRoot)/terraform'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Terraform Apply
    - task: TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(projectRoot)/terraform'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
