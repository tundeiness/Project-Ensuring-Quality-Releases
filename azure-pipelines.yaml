name: Azure Pipelines

trigger:
  branches:
    include:
      - azure-pipelines-selenium

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: vmImageName
    value: 'devopsVM'
 

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Provisioning IaC'
    pool:
      name: myAgentPool
    steps:
    # - task: TerraformInstaller@0
    #   displayName: 'Install Terraform'
    #   inputs:
    #     terraformVersion: '1.5.7'

    - task: Bash@3
      displayName: 'Write SSH Public Key to id_rsa.pub'
      inputs:
        targetType: 'inline'
        script: |
          echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
          chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

    - task: DownloadSecureFile@1
      name: sshkey
      displayName: 'Download SSH Private Key'
      inputs:
        secureFile: 'id_rsa'  # Must match the name of your uploaded secure file

    - task: Bash@3
      displayName: "Install SSH Private Key"
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(sshkey.secureFilePath) ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

    - task: Bash@3
      displayName: 'Run Selenium Tests'
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
          set -euo pipefail
          
          # Disable package caching and force fresh installs
          export PIP_NO_CACHE_DIR=1
          export DEBIAN_FRONTEND=noninteractive
          
          echo "=== System Setup ==="
          # Force package list refresh and upgrade critical components only
          sudo apt update --fix-missing
          sudo apt install -y --no-install-recommends --reinstall \
            python3-pip \
            python3-venv \
            wget \
            unzip \
            ca-certificates \
            gnupg \
            lsb-release
          
          echo "=== Python Environment Setup ==="
          # Force pip upgrade and clear any existing installations
          python3 -m pip install --upgrade --force-reinstall --no-cache-dir pip setuptools wheel
          
          # Uninstall existing selenium/webdriver packages if present
          python3 -m pip uninstall -y selenium webdriver-manager || true
          
          # Install fresh selenium packages
          python3 -m pip install --no-cache-dir --force-reinstall \
            selenium==4.15.2 \
            webdriver-manager==4.0.1
          
          echo "=== Chrome Installation ==="
          # Remove existing Chrome and install fresh
          sudo apt remove -y google-chrome-stable || true
          sudo apt autoremove -y
          
          # Install Chrome via direct download (avoids GPG issues)
          wget -q --no-check-certificate https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y --no-install-recommends --fix-broken ./google-chrome-stable_current_amd64.deb || {
              sudo apt update --fix-missing
              sudo apt install -y --no-install-recommends -f
              sudo dpkg -i google-chrome-stable_current_amd64.deb
          }
          rm -f google-chrome-stable_current_amd64.deb
          
          # Verify Chrome installation
          google-chrome --version
          
          echo "=== Test Execution ==="
          # Ensure clean test environment (create early to prevent artifact publish errors)
          rm -rf tests/
          mkdir -p tests
          touch tests/selenium-output.log
          
          # Set Chrome options for headless CI environment
          export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920,1080"
          
          # Run tests with timeout and proper error handling
          if timeout 300 python3 automatedtesting/selenium/login.py 2>&1 | tee tests/selenium-output.log; then
              echo "Tests completed successfully"
          else
              echo "Tests failed or timed out" | tee -a tests/selenium-output.log
              exit_code=$?
          fi
          
          echo "=== Test Summary ==="
          echo "Chrome version: $(google-chrome --version)"
          echo "Selenium version: $(python3 -c 'import selenium; print(selenium.__version__)')"
          echo "Test output size: $(wc -l < tests/selenium-output.log) lines"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Test Artifacts'
      condition: always()
      inputs:
        targetPath: 'tests/'
        artifactName: 'selenium-test-results'
        publishLocation: 'pipeline'
      
    

    # - task: Bash@3
    #   displayName: 'Terraform Init'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform init \
    #         -backend-config="storage_account_name=tfstatecc9ded810294" \
    #         -backend-config="container_name=tfstate" \
    #         -backend-config="key=test.terraform.tfstate" \
    #         -backend-config="resource_group_name=Azuredevops" \
    #         -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
    #         -backend-config="tenant_id=$ARM_TENANT_ID"

    # - task: Bash@3
    #   displayName: 'Create terraform.tfvars'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       cat > terraform.tfvars <<EOF
    #       subscription_id     = "$ARM_SUBSCRIPTION_ID"
    #       client_id           = "$ARM_CLIENT_ID"
    #       client_secret       = "$ARM_CLIENT_SECRET"
    #       tenant_id           = "$ARM_TENANT_ID"
    #       location            = "East US"
    #       resource_group      = "Azuredevops"
    #       application_type    = "myWebApp"
    #       virtual_network_name = "devopsnet"
    #       address_space       = ["10.5.0.0/16"]
    #       address_prefix_test = "10.5.1.0/24"
    #       vm_name             = "$(vmImageName)"
    #       admin_ssh_key       = "$ADMIN_SSH_PUBLIC_KEY"
    #       EOF

    # - task: Bash@3
    #   displayName: 'Terraform Apply'
    #   env:
    #     ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    #     ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    #     ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    #     ARM_TENANT_ID: $(ARM_TENANT_ID)
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       cd $(System.DefaultWorkingDirectory)/terraform/environments/test
    #       terraform apply -auto-approve




      