name: Azure Pipelines

trigger:
  branches:
    include:
      - main

pool:
  name: myAgentPool

variables:
  - group: azure-credentials
  - group: azure-storage-key
  - name: python_version
    value: '3.8.10'
  - name: azureServiceConnectionId
    value: 'ServiceConnex'
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  - name: vmImageName
    value: 'devopsVM'

stages:
- stage: Build
  jobs:
    - job: BuildInfrastructure
      displayName: 'Provisioning IaC'
      pool:
        name: myAgentPool
      steps:
        # - task: TerraformInstaller@0
        #   displayName: 'Install Terraform'
        #   inputs:
        #     terraformVersion: '1.5.7'

        - task: Bash@3
          displayName: 'Write SSH Public Key to id_rsa.pub'
          inputs:
            targetType: 'inline'
            script: |
              echo "$ADMIN_SSH_PUBLIC_KEY" > $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub
              chmod 644 $(System.DefaultWorkingDirectory)/terraform/environments/test/id_rsa.pub

        - task: DownloadSecureFile@1
          name: sshkey
          displayName: 'Download SSH Private Key'
          inputs:
            secureFile: 'id_rsa'  # Must match the name of your uploaded secure file

        - task: Bash@3
          displayName: "Install SSH Private Key"
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p ~/.ssh
              cp $(sshkey.secureFilePath) ~/.ssh/id_rsa
              chmod 400 ~/.ssh/id_rsa

#         - task: Bash@3
#           displayName: 'Terraform Init'
#           env:
#             ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#             ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#             ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#             ARM_TENANT_ID: $(ARM_TENANT_ID)
#           inputs:
#             targetType: 'inline'
#             script: |
#               cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#               terraform init \
#                 -backend-config="storage_account_name=tfstatecc9ded810294" \
#                 -backend-config="container_name=tfstate" \
#                 -backend-config="key=test.terraform.tfstate" \
#                 -backend-config="resource_group_name=Azuredevops" \
#                 -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
#                 -backend-config="tenant_id=$ARM_TENANT_ID"

#         - task: Bash@3
#           displayName: 'Create terraform.tfvars'
#           env:
#             ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#             ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#             ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#             ARM_TENANT_ID: $(ARM_TENANT_ID)
#           inputs:
#             targetType: 'inline'
#             script: |
#               cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#               cat > terraform.tfvars <<EOF
#               subscription_id      = "$ARM_SUBSCRIPTION_ID"
#               client_id            = "$ARM_CLIENT_ID"
#               client_secret        = "$ARM_CLIENT_SECRET"
#               tenant_id            = "$ARM_TENANT_ID"
#               location             = "East US"
#               resource_group       = "Azuredevops"
#               application_type     = "myWebApp"
#               virtual_network_name = "devopsnet"
#               address_space        = ["10.5.0.0/16"]
#               address_prefix_test  = "10.5.1.0/24"
#               vm_name              = "$(vmImageName)"
#               admin_ssh_key        = "$ADMIN_SSH_PUBLIC_KEY"
#               EOF

#         - task: Bash@3
#           displayName: 'Terraform Apply'
#           env:
#             ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#             ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#             ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#             ARM_TENANT_ID: $(ARM_TENANT_ID)
#           inputs:
#             targetType: 'inline'
#             script: |
#               cd $(System.DefaultWorkingDirectory)/terraform/environments/test
#               terraform apply -auto-approve

#         - task: ArchiveFiles@2
#           displayName: 'Archive FakeRestAPI'
#           inputs:
#             rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
#             includeRootFolder: false
#             archiveType: 'zip'
#             archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

#         - task: PublishBuildArtifacts@1
#           displayName: 'Upload Package'
#           inputs:
#             PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#             ArtifactName: 'drop-fakerestapi'
#             publishLocation: 'Container'

# - stage: Deploy
#   jobs:
#     - deployment: FakeRestAPI
#       displayName: 'Deploy to Azure App Service'
#       environment: 'test'
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#               - task: DownloadPipelineArtifact@2
#                 displayName: 'Download Build Artifact'
#                 inputs:
#                   artifact: 'drop-fakerestapi'
#                   path: '$(Pipeline.Workspace)'

#               - task: AzureWebApp@1
#                 displayName: 'Deploy to Azure Web App'
#                 inputs:
#                   azureSubscription: 'ServiceConnex'
#                   appName: 'myWebApp-AppService-bc8444f7'
#                   appType: 'webApp'
#                   package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'


# - stage: EnduranceTest
#   displayName: 'Endurance Test Stage'
#   jobs:
#     - deployment: RunEnduranceTest
#       displayName: 'Run Endurance Test'
#       environment: 'test'
#       strategy:
#         runOnce:
#           deploy:
#             steps:

#               - task: Bash@3
#                 displayName: 'Clean endurance report directory'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     rm -rf endurance-test-report

#               - task: Bash@3
#                 displayName: 'Install Java (OpenJDK 11)'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     sudo apt-get update
#                     sudo apt-get install -y openjdk-11-jdk
#                     java -version
#               - task: JMeterInstaller@0
#                 displayName: 'Install JMeter'
#               - task: Bash@3
#                 displayName: 'Execute Endurance Test Suite'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     jmeter -n \
#                       -t automatedtesting/jmeter/endurance.jmx \
#                       -l endurance-test-report/endurance-results.jtl \
#                       -e \
#                       -o endurance-test-report

#               - task: PublishBuildArtifacts@1
#                 displayName: 'Publish Endurance Report'
#                 inputs:
#                   PathtoPublish: 'endurance-test-report'
#                   ArtifactName: 'endurance-report'
#                   publishLocation: 'Container'

#               - task: Bash@3
#                 displayName: 'Print Endurance Logs'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     ls -lah endurance-test-report/
#                     cat jmeter.log

# - stage: StressTest
#   displayName: 'Stress Test Stage'
#   jobs:
#     - deployment: RunStressTest
#       displayName: 'Run Stress Test'
#       environment: 'test'
#       strategy:
#         runOnce:
#           deploy:
#             steps:

#               - task: Bash@3
#                 displayName: 'Clean stress report directory'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     rm -rf stress-test-report

#               - task: Bash@3
#                 displayName: 'Install Java (OpenJDK 11)'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     sudo apt-get update
#                     sudo apt-get install -y openjdk-11-jdk
#                     java -version
#               - task: JMeterInstaller@0
#                 displayName: 'Install JMeter'
#               - task: Bash@3
#                 displayName: 'Execute Stress Test Suite'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     jmeter -n \
#                       -t automatedtesting/jmeter/stress.jmx \
#                       -l stress-test-report/stress-results.jtl \
#                       -e \
#                       -o stress-test-report

#               - task: PublishBuildArtifacts@1
#                 displayName: 'Publish Stress Report'
#                 inputs:
#                   PathtoPublish: 'stress-test-report'
#                   ArtifactName: 'stress-report'
#                   publishLocation: 'Container'

#               - task: Bash@3
#                 displayName: 'Print Stress Logs'
#                 inputs:
#                   targetType: 'inline'
#                   script: |
#                     ls -lah stress-test-report/
#                     cat jmeter.log

- stage: PostmanTest
  displayName: 'Regression Suite Stage'
  jobs:
    - deployment: RunRegressionTest
      displayName: 'Run Regression Test'
      environment: 'test'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Bash@3
                displayName: 'Install Node.js, Newman and Run Postman Collections'
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "🔧 Installing Node.js and npm..."
                    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                    sudo apt-get install -y nodejs

                    echo "🧪 Verifying installation..."
                    node -v
                    npm -v

                    echo "📦 Installing Newman and JUnitFull Reporter..."
                    sudo npm install -g newman
                    sudo npm install -g newman-reporter-junitfull

                    echo "🚀 Running Data Validation Collection..." 
                    newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/data_validation_suite.json" \
                      -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/validation-environment.json" \
                      -r cli,junitfull \
                      --reporter-junitfull-export result-data-validation-test.xml

                    echo "🚀 Running Data Regression Collection..."
                    newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/regression_suite.json" \
                      -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/regression-environment.json" \
                      -r cli,junitfull \
                      --reporter-junitfull-export result-regression-test.xml

              - task: PublishTestResults@2
                displayName: 'Publish Newman JUnitFull Reports'
                inputs:
                  testResultsFormat: 'JUnit'
                  testResultsFiles: |
                    result-data-validation-test.xml
                    result-regression-test.xml
                  failTaskOnFailedTests: true
